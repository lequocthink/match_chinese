

/*******************************
 * 2) BI·∫æN TR·∫†NG TH√ÅI
 *******************************/
const chineseList = document.getElementById("chineseList");
const meanList = document.getElementById("meanList");
const scoreEl = document.getElementById("score");
const mistakesEl = document.getElementById("mistakes");
const progressEl = document.getElementById("progress");
const noticeEl = document.getElementById("notice");
const wordsPerRoundSel = document.getElementById("wordsPerRound");
const restartBtn = document.getElementById("restartBtn");
const nextBtn = document.getElementById("nextBtn");

let score = 0;
let mistakes = 0;
let order = [];   // m·∫£ng index ƒë√£ x√°o tr·ªôn to√†n b·ªô
let cursor = 0;   // con tr·ªè ƒëang ·ªü v·ªã tr√≠ n√†o trong order
let currentSlice = []; // index c√°c t·ª´ c·ªßa v√≤ng hi·ªán t·∫°i
let matchesLeft = 0;

let selectedChinese = null; // li
let selectedMean = null;    // li

/*******************************
 * 3) H√ÄM TI·ªÜN √çCH
 *******************************/
function shuffle(arr) {
  // Fisher-Yates
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = (Math.random() * (i + 1)) | 0;
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

function updateStats() {
  scoreEl.textContent = String(score);
  mistakesEl.textContent = String(mistakes);

  const wordsPerRound = getWordsPerRound();
  const totalRounds = Math.ceil(vocabulary.length / wordsPerRound);
  const played = Math.floor(cursor / wordsPerRound) + (matchesLeft === 0 && currentSlice.length ? 1 : 0);
  const currentRound = Math.min(played || 1, totalRounds) || 0;

  progressEl.textContent = `V√≤ng ${currentRound}/${totalRounds}`;
}

function getWordsPerRound() {
  return parseInt(wordsPerRoundSel.value, 10) || 5;
}

function setNotice(msg = "") {
  noticeEl.textContent = msg;
}

/*******************************
 * 4) V√íNG CH∆†I
 *******************************/
function buildOrderAndReset() {
  order = shuffle([...Array(vocabulary.length).keys()]); // [0..N-1] x√°o tr·ªôn
  cursor = 0;
  score = 0;
  mistakes = 0;
  selectedChinese = null;
  selectedMean = null;
  nextBtn.disabled = true;
  setNotice("");
  renderRound();
  updateStats();
}

function renderRound() {
  chineseList.innerHTML = "";
  meanList.innerHTML = "";
  selectedChinese = null;
  selectedMean = null;
  nextBtn.disabled = true;

  const wordsPerRound = getWordsPerRound();
  if (cursor >= order.length) {
    // H·∫øt to√†n b·ªô t·ª´
    currentSlice = [];
    matchesLeft = 0;
    setNotice("üéâ B·∫°n ƒë√£ ch∆°i h·∫øt t·∫•t c·∫£ c√°c t·ª´! Nh·∫•n Restart ƒë·ªÉ ch∆°i l·∫°i.");
    updateStats();
    return;
  }

  // L·∫•y m·∫£ng index cho v√≤ng hi·ªán t·∫°i
  currentSlice = order.slice(cursor, cursor + wordsPerRound);
  matchesLeft = currentSlice.length;

  // T·∫°o danh s√°ch Chinese (x√°o tr·ªôn trong ph·∫°m vi slice ƒë·ªÉ v·ªã tr√≠ ƒë·ªïi m·ªói v√≤ng)
  const chineseIndices = shuffle(currentSlice);
  for (const idx of chineseIndices) {
    const li = document.createElement("li");
    li.textContent = vocabulary[idx].chinese;
    li.dataset.idx = String(idx); // d√πng index ƒë·ªÉ ƒë·ªëi chi·∫øu
    li.addEventListener("click", () => onSelectChinese(li));
    chineseList.appendChild(li);
  }

  // T·∫°o danh s√°ch Mean (x√°o tr·ªôn)
  const meanIndices = shuffle(currentSlice);
  for (const idx of meanIndices) {
    const li = document.createElement("li");
    li.textContent = vocabulary[idx].mean;
    li.dataset.idx = String(idx);
    li.addEventListener("click", () => onSelectMean(li));
    meanList.appendChild(li);
  }

  setNotice(`Ch·ªçn c·∫∑p kh·ªõp nhau. C√≤n ${matchesLeft} c·∫∑p trong v√≤ng n√†y.`);
  updateStats();
}

function onSelectChinese(li) {
  if (li.classList.contains("disabled")) return;
  if (selectedChinese) selectedChinese.classList.remove("selected");
  selectedChinese = li;
  li.classList.add("selected");
  tryCheckMatch();
}

function onSelectMean(li) {
  if (li.classList.contains("disabled")) return;
  if (selectedMean) selectedMean.classList.remove("selected");
  selectedMean = li;
  li.classList.add("selected");
  tryCheckMatch();
}

function tryCheckMatch() {
  if (!selectedChinese || !selectedMean) return;

  const idxA = selectedChinese.dataset.idx;
  const idxB = selectedMean.dataset.idx;

  if (idxA === idxB) {
    // ƒê√öNG
    selectedChinese.classList.remove("selected");
    selectedMean.classList.remove("selected");
    selectedChinese.classList.add("correct", "disabled");
    selectedMean.classList.add("correct", "disabled");

    score++;
    matchesLeft--;
    setNotice(`‚úÖ ƒê√∫ng! C√≤n ${matchesLeft} c·∫∑p.`);

    // reset selection
    selectedChinese = null;
    selectedMean = null;

    if (matchesLeft === 0) {
      // V√≤ng ho√†n t·∫•t
      nextBtn.disabled = false;
      setNotice("üéØ Ho√†n th√†nh v√≤ng n√†y! Nh·∫•n Next Round ƒë·ªÉ ti·∫øp t·ª•c.");
    }
    updateStats();
  } else {
    // SAI
    selectedChinese.classList.add("wrong");
    selectedMean.classList.add("wrong");
    mistakes++;
    setNotice("‚ùå Sai r·ªìi, th·ª≠ l·∫°i nh√©!");

    // B·ªè highlight sai sau 500ms
    const a = selectedChinese, b = selectedMean;
    selectedChinese = null;
    selectedMean = null;
    setTimeout(() => {
      a.classList.remove("selected", "wrong");
      b.classList.remove("selected", "wrong");
    }, 500);

    updateStats();
  }
}

function nextRound() {
  // Nh·∫£y con tr·ªè ƒë·∫øn sau slice hi·ªán t·∫°i
  cursor += currentSlice.length;
  renderRound();
}

/*******************************
 * 5) S·ª∞ KI·ªÜN
 *******************************/
restartBtn.addEventListener("click", buildOrderAndReset);
nextBtn.addEventListener("click", nextRound);

// ƒê·ªïi s·ªë t·ª´ m·ªói v√≤ng ‚Üí restart ƒë·ªÉ t√≠nh l·∫°i t·ªïng v√≤ng & th·ª© t·ª±
wordsPerRoundSel.addEventListener("change", buildOrderAndReset);

/*******************************
 * 6) KH·ªûI ƒê·ªòNG
 *******************************/
buildOrderAndReset();


// L·∫•y ph·∫ßn t·ª≠
const modal = document.getElementById("vocabModal");
const btn = document.getElementById("showVocabularyBtn");
const span = document.querySelector(".close");
const vocabTableBody = document.getElementById("vocabTableBody");

// Khi click n√∫t -> m·ªü popup v√† render b·∫£ng
btn.onclick = function() {
  vocabTableBody.innerHTML = ""; // clear b·∫£ng c≈©
  vocabulary.forEach((word, index) => {
    const row = `<tr>
      <td>${index + 1}</td>
      <td>${word.chinese}</td>
      <td>${word.mean}</td>
      <td>${word.pronunciation}</td>
      <td>${word.pinyin}</td>
    </tr>`;
    vocabTableBody.innerHTML += row;
  });
  modal.style.display = "block";
}

// Khi click n√∫t ƒë√≥ng -> t·∫Øt popup
span.onclick = function() {
  modal.style.display = "none";
}

// Khi click ra ngo√†i popup -> c≈©ng t·∫Øt
window.onclick = function(event) {
  if (event.target === modal) {
    modal.style.display = "none";
  }
}